package io.ht.designpattern.creational.singleton;
/**
 * 单例模式：涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一
 * 的对象方式。可以直接访问，不需要实例化该类的对象
 * 意图：保证一个类仅有一个实例，并提供一个访问它的全局访问点
 * 主要解决：一个全局使用的类频繁的创建与销毁
 * 使用目标：控制实例数目，节省系统资源
 * 解决方案：判断系统是否已经有这个单例，若有，则返回。
 * 关键代码：构造函数是私有的
 * 优点：1、在内存中只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例。2、避免对资源的多重占用
 * 缺点：没有接口，不能继承，与单一职责原则冲突，一个类只关心内部逻辑，而从不关心外面怎么样来实例化。
 * 使用场景：1、要求生产唯一的序列号；2、web的计数器；3.创建的一个对象需要消耗的资源过多，譬如I/O与数据库的连接等
 *
 *
 *
 *
 *
 *
 *
 */